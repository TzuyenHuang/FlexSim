setviewtext(systemwindow(1), "");
setviewtext(systemwindow(2), "");
setviewtext(systemwindow(3), "");
for(int n = content(model()); n > 1; n--){
	destroyobject(rank(model(), n));
}

Object source = Object.create("Source");
Object Source = Model.find("Source");
source.location = Vec3(0, 0, 0);
Source.setProperty("UseTransport", 1);

Storage.Object rack = Object.create("Rack");
Object Rack = Model.find("Rack");
rack.location = Vec3(5, 0, 0);
Rack.setProperty("UseTransport", 1);
Map dimensions = Rack.getProperty("Dimensions");
dimensions.NumBays = 3;
dimensions.NumLevels = 5;
dimensions.SlotsPerBay = 1;
Rack.setProperty("Dimensions",dimensions);

Object queue = Object.create("Queue");
Object Queue = Model.find("Queue");
queue.location = Vec3(15, 0, 0);

TaskExecuter asrsvehicle = Object.create("ASRSvehicle");
Object ASRSvehicle = Model.find("ASRSvehicle");
asrsvehicle.location = Vec3(0, -5, 0);

contextdragconnection(Source, Rack, "A");
contextdragconnection(Rack, Queue, "A");
contextdragconnection(Source, ASRSvehicle, "S");
contextdragconnection(Rack, ASRSvehicle, "S");

Source.setProperty("ArrivalStyle", 2);
Table sourceArrivals = source.find(">variables/schedule");
sourceArrivals[1][3] = 15;

treenode slotAssignmentStrategy = rack.find(">variables/slotAssignment");
string codeString = slotAssignmentStrategy.value;
//slotAssignmentStrategy.value = codeString.replace("true", "slot.slotItems.length == 0");
slotAssignmentStrategy.value = codeString.replace("!slot.hasSpace(item)", "slot.slotItems.length > 0");
